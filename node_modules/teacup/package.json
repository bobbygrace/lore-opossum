{
  "name": "teacup",
  "version": "1.0.0",
  "description": "Render HTML with native CoffeeScript templates. No magic, no fuss.",
  "homepage": "http://goodeggs.github.com/teacup/",
  "main": "lib/teacup",
  "repository": {
    "type": "git",
    "url": "git://github.com/goodeggs/teacup.git"
  },
  "keywords": [
    "template",
    "coffeescript",
    "coffee-script",
    "coffee",
    "render",
    "view",
    "html",
    "coffeekup",
    "coffeecup",
    "drykup",
    "express"
  ],
  "devDependencies": {
    "coffee-script": ">=1.7.0",
    "connect-assets": "*",
    "mocha": "*",
    "expect.js": "*"
  },
  "scripts": {
    "pretest": "npm run compile",
    "prepublish": "npm run compile",
    "test": "mocha",
    "compile": "coffee --compile --output lib/ src/"
  },
  "readme": "![teacup](https://raw.github.com/goodeggs/teacup/master/docs/teacup.jpg)\n\nTeacup is templates in CoffeeScript.\n\nCompose DSL functions to build strings of HTML.\nPackage templates and helpers in CommonJS, AMD modules, or vanilla coffeescript.\nIntegrate with the tools you love: Express, Backbone, Rails, and more.\n\n[![Build Status](http://img.shields.io/travis/goodeggs/teacup.svg?style=flat-square)](https://travis-ci.org/goodeggs/teacup)\n[![NPM version](http://img.shields.io/npm/v/teacup.svg?style=flat-square)](https://www.npmjs.org/package/teacup)\n[![Bower version](http://img.shields.io/bower/v/teacup.svg?style=flat-square)](https://github.com/goodeggs/teacup)\n\nThe Basics\n---------------\n\nUse the `renderable` helper to create a function that returns an HTML string when called.\n\n```coffee\n{renderable, ul, li, input} = require 'teacup'\n\ntemplate = renderable (teas)->\n  ul ->\n    for tea in teas\n      li tea\n    input type: 'button', value: 'Steep'\n\nconsole.log template(['Jasmine', 'Darjeeling'])\n# Outputs <ul><li>Jasmine</li><li>Darjeeling</li></ul><input type=\"button\" value=\"Steep\"/>\n```\n\nUse the `render` helper to render a template to a string immediately.\n\n```coffee\n{render, ul, li} = require 'teacup'\n\noutput = render ->\n  ul ->\n    li 'Bergamont'\n    li 'Chamomile'\n\nconsole.log output\n# Outputs <ul><li>Bergamont</li><li>Chamomile</li></ul>\n```\n\n\n### Express\n\nTo use Teacup as your Express template engine:\n\nInstall from npm\n\n    $ npm install teacup\n\nRegister Teacup as a view engine.\n\n```coffee\nexpress = require 'express'\nteacup = require 'teacup/lib/express'\n\napp = express()\napp.configure ->\n  app.engine \"coffee\", teacup.renderFile\n```\n\nThen write your views as regular old coffee files that export a renderable template.\n\n```coffee\n# views/example.coffee\n{renderable, div, h1} = require 'teacup'\n\nmodule.exports = renderable ({title}) ->\n  div '#example', ->\n    h1 \"Hello, #{title}\"\n```\n\nYou can use Teacup templates even if your Express app is not using CoffeeScript.\n\n### connect-assets\n\nIf you are using [connect-assets](https://github.com/TrevorBurnham/connect-assets) to compile your CoffeeScript in\nan asset pipeline, you can use the Teacup middleware which registers connect-assets `js` and `css` helpers with Teacup.\n\nGrab the module to get started\n\n    $ npm install teacup\n\nThen configure the middleware\n\n```coffee\nexpress = require 'express'\nconnectAssets = require 'teacup/lib/connect-assets'\napp = express()\napp.configure ->\n  app.use connectAssets(src: 'assets', jsDir: 'javascripts', cssDir: 'stylesheets')\n```\n\nAnd in your templates:\n\n```coffee\n{renderable, js, css, html, head, body} = require 'teacup'\n\nmodule.exports = renderable ->\n  html ->\n    head ->\n      js 'app'\n      css 'app'\n    body ->\n      # ...\n```\n\nThe Teacup middleware passes the provided options to connect-assets and returns an instance of the connect-assets middleware.\n\n### Browser\n\nTo use for client-side rendering, all you need is [teacup.js](https://raw.github.com/goodeggs/teacup/master/lib/teacup.js).  You can\ntoss it in a script tag, `require()` and browserify it, load it with an AMD loader, send it down an asset pipeline\nlike Rails or connect-assets, or use some sweet custom build process.\n\nTeacup claims window.teacup if you arent using AMD or CommonJS.\n\n```coffee\n{renderable, ul, li} = teacup\n\ntemplate = renderable (items)->\n  ul ->\n    li item for item in items\n\nconsole.log template(['One', 'Two'])\n```\n\n### Backbone\n\nFeel free to write your template in the same file as a Backbone View and call it from `view.render()` like so:\n\n```coffee\n{renderable, div, h1, ul, li, p, form, input} = teacup\n\ntemplate = renderable (kids) ->\n  div ->\n    h1 \"Welcome to our tea party\"\n    p \"We have a few kids at the table...\"\n    ul ->\n      kids.each (kid) ->\n        li kid.get 'name'\n    form ->\n      input placeholder: 'Add another'\n\nclass PartyView extends Backbone.View\n\n  constructor: (kids) ->\n    @kids = new Backbone.Collection kids\n    super()\n\n  render: ->\n    @$el.html template(@kids)\n    @$('form input').focus()\n    @\n\n```\nCheck out [teacup-backbone-example](https://github.com/goodeggs/teacup-backbone-example) for a complete Backbone + Express app.\n\n\n### Rails\n\nThe [Teacup::Rails](https://github.com/goodeggs/teacup-rails) gem makes Teacup available to the asset pipeline in Rails 3.1+.\n\nGuide\n---------\n\n### Ids and Classes\n\nPass a CSS selector as the first argument to a tag function to add ids and classes.\n\n```coffee\n{render, div} = require 'teacup'\n\nconsole.log render ->\n  div '#confirm.btn.btn-small'\n# Outputs <div id=\"confirm\" class=\"btn btn-small\"></div>\n```\n\n### Attributes\n\nDefine tag attributes with object literals.\n\n```coffee\n{render, button} = require 'teacup'\n\nconsole.log render ->\n  button '.btn', type: 'button', disabled: true, 'Click Me'\n# Outputs <button class=\"btn\" type=\"button\" disabled=\"disabled\">Click Me</button>\n```\n\n### Escaping\n\nTeacup escapes input by default. To disable escaping, use the `raw` helper.\n\n```coffee\n{render, raw, h1, div} = require 'teacup'\n\ninner = render ->\n  h1 'Header'\n\nconsole.log render ->\n  div inner\n# Outputs <div>&lt;h1&gt;Header&lt;/h1&gt;</div>\n\nconsole.log render ->\n  div ->\n    raw inner\n# Outputs <div><h1>Header</h1></div>\n```\n\n### Text\n\nThe text helper inserts a string in the template without wrapping it in a tag.  It creates a [text node](https://developer.mozilla.org/en-US/docs/DOM/Text).\n\n```coffee\n{render, text, b, em, p} = require 'teacup'\n\nconsole.log render ->\n  p ->\n    text 'Sometimes you just want '\n    b 'plain'\n    text ' text.'\n# Outputs <p>Sometimes you just want <b>plain</b> text.</p>\n```\n\n### Custom Tags\n\nYou can define custom tags with the tag helper.\n\n```coffee\n{render, tag} = require 'teacup'\n\nconsole.log render ->\n  tag 'chart',\n    value: '5'\n    style: 'colored'\n# Outputs <chart value=\"5\" style=\"colored\"></chart>\n```\n\n### Helpers\n\nWrite view helpers as renderable functions and require them as needed.\n\nHere's a helpers file that defines a set of [microformats](http://microformats.org/wiki/hcalendar).\n\n```coffee\n# views/microformats.coffee\n{renderable, span, text} = require 'teacup'\nmoment = require 'moment'\n\nmodule.exports =\n  hcalendar: renderable ({date, location, summary}) ->\n    span \".vevent\", ->\n      span \".summary\", summary\n      text \" on \"\n      span \".dtstart\", moment(date).format(\"YYYY-MM-DD\")\n      text \" was in \"\n      span \".location\", location\n```\n\nAnd a view that uses one of the helpers.\n\n```coffee\n# views/events.coffee\n{renderable, ul, li} = require 'teacup'\n{hcalendar} = require './microformats'\n\nmodule.exports = renderable ({events}) ->\n  ul ->\n    for event in events\n      li ->\n        hcalendar event\n```\n\nYou can write helpers that support css selector classnames and ids using `normalizeArgs`:\n\n```coffee\n{normalizeArgs, input} = require 'teacup'\n\ntextInput = ->\n  {attrs, contents} = normalizeArgs arguments\n  attrs.type = 'text'\n  input attrs, contents\n```\n\n### Compiling Templates\n\nJust use the CoffeeScript compiler.  Uglify will make em real small.\n\n```\n$ coffee -c -o build src\n```\n\n### Plugins\n\n\n  Use plugins with the `use` method:\n\n  ```coffee\n  teacup = require 'teacup'\n  camelToKebab = require 'teacup-camel-to-kebab'\n\n  teacup.use camelToKebab()\n  ```\n\n#### Available Plugins\n  - [camel-to-kebab](https://github.com/goodeggs/teacup-camel-to-kebab) - transform camelCase attribute names to kebab-case\n\nFAQ\n----\n\n**How's this different from CoffeeCup?**\n\n[CoffeeCup](http://github.com/gradus/coffeecup) is the currently maintained fork of\n[CoffeeKup](http://github.com/mauricemach/coffeekup) and is what we were using at Good Eggs before switching to Teacup.\nThe problem with CoffeeCup is that it uses some `eval` magic to put the tag functions in scope. This magic breaks\nclosure scope so you can't actually write templates using the functional constructs that you'd expect.\n\nLegacy\n-------\n\n[Markaby](http://github.com/markaby/markaby) begat [CoffeeKup](http://github.com/mauricemach/coffeekup) begat\n[CoffeeCup](http://github.com/gradus/coffeecup) and [DryKup](http://github.com/mark-hahn/drykup) which begat **Teacup**.\n\nContributing\n-------------\n\n```\n$ git clone https://github.com/goodeggs/teacup && cd teacup\n$ npm install\n$ npm test\n```\n\n[Changelog](https://github.com/goodeggs/teacup/commits/master)\n---------\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/goodeggs/teacup/issues"
  },
  "_id": "teacup@1.0.0",
  "dist": {
    "shasum": "a9b74f309ebcdfa491cf5d601c3c33c0dda1e71b"
  },
  "_from": "teacup@",
  "_resolved": "https://registry.npmjs.org/teacup/-/teacup-1.0.0.tgz"
}
