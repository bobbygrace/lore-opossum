{
  "name": "combokeys",
  "version": "2.0.0",
  "description": "JavaScript library for handling keyboard shortcuts in the browser",
  "main": "index.js",
  "homepage": "https://github.com/mightyiam/combokeys",
  "implements": [
    "CommonJS/Modules/1.0"
  ],
  "scripts": {
    "test": "./node_modules/zuul/bin/zuul --phantom -- test/test.combokeys.js"
  },
  "repositories": [
    {
      "type": "git",
      "url": "git://github.com/mightyiam/combokeys.git"
    }
  ],
  "keywords": [
    "keyboard",
    "shortcuts",
    "events",
    "browser"
  ],
  "maintainers": [
    {
      "name": "Shahar Or",
      "email": "mightyiampresence@gmail.com",
      "url": "https://github.com/mightyiam"
    }
  ],
  "contributors": [
    {
      "name": "Shahar Or",
      "email": "mightyiampresence@gmail.com",
      "url": "https://github.com/mightyiam"
    },
    {
      "name": "Craig Campbell",
      "url": "http://craig.is"
    }
  ],
  "bugs": {
    "url": "https://github.com/mightyiam/combokeys/issues"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.txt"
    }
  ],
  "devDependencies": {
    "chai": "^1.10.0",
    "es5-shim": "^4.0.3",
    "grunt": "~0.4.1",
    "grunt-complexity": "~0.1.2",
    "grunt-eslint": "^2.0.0",
    "load-grunt-tasks": "^1.0.0",
    "mocha": "^2.0.1",
    "phantomjs": "^1.9.12",
    "sinon": "^1.12.1",
    "zuul": "^1.13.1"
  },
  "readme": "# Combokeys\n\nCombokeys is a JavaScript library for handling keyboard shortcuts in the browser.\n\nIt is licensed under the Apache 2.0 license.\n\nIt is around **1.9kb** minified and gzipped and **3.5kb** minified, has no external dependencies, and has been tested in the following browsers:\n\n- Internet Explorer 6+ (test suite works in IE9+)\n- Safari\n- Firefox\n- Chrome\n\nIt has support for ``keypress``, ``keydown``, and ``keyup`` events on specific keys, keyboard combinations, or key sequences.\n\n## Fork notice\n\nThis project was forked from [ccampbell/mousetrap](https://github.com/ccampbell/mousetrap).\n\nIt was forked because pull–requests were not being reviewed.\n\nThis fork's author intends to review pull–requests.\n\nMain changes are\n\n1. Refactored as CommonJS\n2. Doesn't automatically listen on the `document`. Instead, it is now a constructor and the element on which to listen must be provided on instantiation. Multiple instances possible.\n\n## Getting started\n\nGet it on your page:\n\n```\nvar Combokeys;\nCombokeys = require(\"combokeys\");\n```\n\nInstantiate it for the entire page:\n\n```\nvar combokeys = new Combokeys(document);\n```\n\nOr, instantiate it for one or more specific elements:\n\n```\nvar firstCombokeys = new Combokeys(document.getElementById(\"first\"));\nvar secondCombokeys = new Combokeys(document.getElementById(\"second\"));\n```\n\nAdd some combos!\n\n```\n// single keys\ncombokeys.bind('4', function() { console.log('4'); });\nfirstCombokeys.bind(\"?\", function() { console.log('show shortcuts!'); });\nsecondCombokeys.bind('esc', function() { console.log('escape'); }, 'keyup');\n\n// combinations\ncombokeys.bind('command+shift+k', function() { console.log('command shift k'); });\n\n// map multiple combinations to the same callback\ncombokeys.bind(['command+k', 'ctrl+k'], function() {\n    console.log('command k or control k');\n    // return false to prevent default browser behavior\n    // and stop event from bubbling\n    return false;\n});\n\n// gmail style sequences\nCombokeys.bind('g i', function() { console.log('go to inbox'); });\nCombokeys.bind('* a', function() { console.log('select all'); });\n\n// konami code!\nCombokeys.bind('up up down down left right left right b a enter', function() {\n    console.log('konami code');\n});\n```\n\n## Why Combokeys?\n\nThere are a number of other similar libraries out there so what makes this one different?\n\n- CommonJS, NPM (package for this fork not yet published).\n- You are not limited to ``keydown`` events (You can specify ``keypress``, ``keydown``, or ``keyup`` or let Combokeys choose for you).\n- You can bind key events directly to special keys such as ``?`` or ``*`` without having to specify ``shift+/`` or ``shift+8`` which are not consistent across all keyboards\n- It works with international keyboard layouts\n- You can bind Gmail like key sequences in addition to regular keys and key combinations\n- You can programatically trigger key events with the ``trigger()`` method\n- It works with the numeric keypad on your keyboard\n- The code is well documented/commented\n\n## Plugins\n\nSince this project was forked from\n[ccampbell/mousetrap](https://github.com/ccampbell/mousetrap)\nand was converted to CommonJS, the plugins were not converted to CommonJS, so they don't work yet.\n\n### Bind dictionary\n\nAllows you to make multiple bindings in a single ``Combokeys.bind`` call.\n\n### Global bind\n\nAllows you to set global bindings that work even inside of input fields.\n\n### Pause/unpause\n\nAllows you to temporarily prevent Combokeys events from firing.\n\n### Record\n\nAllows you to capture a keyboard shortcut or sequence defined by a user.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mightyiam/combokeys.git"
  },
  "_id": "combokeys@2.0.0",
  "dist": {
    "shasum": "e7e653892b77e0e1324a5e567a062d7682e08382"
  },
  "_from": "combokeys@",
  "_resolved": "https://registry.npmjs.org/combokeys/-/combokeys-2.0.0.tgz"
}
