{
  "name": "argh",
  "version": "0.1.3",
  "description": "light weight option/argv parser for node, it only parses options, nothing more then that.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha $(find test -name '*.test.js')"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:observing/argh.git"
  },
  "keywords": [
    "argument",
    "args",
    "option",
    "parser",
    "cli",
    "argv",
    "options",
    "command",
    "command-line"
  ],
  "author": {
    "name": "Arnout Kazemier",
    "email": "opensource@observe.it"
  },
  "license": "MIT",
  "devDependencies": {
    "assume": "0.0.x",
    "mocha": "1.20.x",
    "pre-commit": "0.0.x"
  },
  "readme": "# argh!\n\n[![Build Status](https://travis-ci.org/observing/argh.png?branch=master)](https://travis-ci.org/observing/argh)\n\n`argh` is an extremely light weight options or `process.argv` parser for node.js.\nIt only includes the bare minimal to parse options. It's not a full blown cli\nlibrary, but it can be used as a dependency of a cli library to do all the heavy\nlifting.\n\n`argh` was born out of rage, every cli library that we've found did more than\nthey advertised and added unneeded bloat to what we were trying to achieve... and\nthat was argument parsing. Tiny modules should only focus on one thing and do\nthat one thing really well.\n\n### Installation\n\n```\nnpm install argh --save\n```\n\n### Usage\n\n`argh` has two functions:\n\n1. A simple parser interface for custom option parsing using `argh(..)`\n2. A lazy loaded parsed results for the `process.argv` using `argh.argv`\n\n```js\nvar argh = require('argh');\n\n// You can directly access the parsed arguments of the node process through\nconsole.log(argh.argv);\n\n// This the same result as running\nconsole.log(argh(process.argv));\n```\n\n#### So what is supported?\n\n- `--arg` or `-a` Is transformed to a boolean (true) if no value is given\n- `-abc` Is transformed to multiple booleans.\n- `--no-arg`, `--disable-arg` Is transformed to a boolean (false)\n- `-no-abc`, `--disable-abc` Is transformed to multiple booleans (false)\n- `--foo bar`, `--foo=\"bar\"`, `--foo='bar'` or `--foo=bar` Is all transformed\n  to key / value pairs. Where `foo` is the key and `bar` the value\n- `--port 1111` Automatically transforms the string 1111 in a number\n- `--beer true` As you might have guessed it, it's transformed into a boolean\n- `--` Can be used as an indicator to stop parsing arguments.\n\n### Examples\n\nEverybody likes examples, let's assume that the following code is stored as `parse.js`:\n\n```js\nvar argv = require('argh').argv;\n\nconsole.log(argv);\n```\n\nParsing a single argument:\n\n```\n$ node parse.js --foo\n\n{ foo: true }\n```\n\nParsing multiple arguments:\n\n```\n$ node parse.js --foo bar --bar='baz'\n\n{ foo: 'bar', bar: 'baz' }\n```\n\nParsing multiple boolean arguments:\n\n```\n$ node parse.js --foo --no-bar -s --no-f\n\n{ foo: true,\n  bar: false,\n  s: true,\n  f: false }\n```\n\nParsing multiple short arguments:\n\n```\n$ node parse.js -abc -no-def\n\n{ a: true, b: true, c: true, d: false, e: false, f: false }\n```\n\nParsing different values:\n\n```\n$ node parse.js --awesome true --port 1111\n\n{ awesome: true, port: 1111 }\n```\n\nCombining arguments in to an object:\n\n```\n$node parse.js --redis.port 8080 --redis.host localhost\n\n{ redis: { port: 8080, host: 'localhost' }\n```\n\nHandling rest arguments:\n\n```\n$ node parse.js --argh --is --awesome -- 1111 --pewpew aaarrgghh\n\n{ argh: true,\n  is: true,\n  awesome: true,\n  argv: [ '1111', '--pewpew', 'aaarrgghh' ] }\n```\n\nAll unknown arguments are also directly pushed in to the `argv` property:\n\n```\n$ node parse.js --foo 111 bar unkown --hello world BUUURRRRRNN\n\n{ foo: 111,\n  argv: [ 'bar', 'unkown', 'BUUURRRRRNN' ],\n  hello: 'world' }\n```\n\n## License MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/observing/argh/issues"
  },
  "homepage": "https://github.com/observing/argh",
  "_id": "argh@0.1.3",
  "dist": {
    "shasum": "b3453ecaf16bbb5e746b9e84c52233eba22db553"
  },
  "_from": "argh@0.1.x",
  "_resolved": "https://registry.npmjs.org/argh/-/argh-0.1.3.tgz"
}
